name: Manual Build

on:
  workflow_dispatch:
    inputs:
      minecraft_version:
        description: 'Minecraft version'
        required: true
        default: 'latest'
      issue:
        description: 'URL of the issue requesting this build'
        required: false
        default: ''

env:
  BUILD_TYPE: Release

jobs:
  # Make sure dependencies are in cache
  pre_configure:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            generator: "Visual Studio 17 2022"
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            generator: "Unix Makefiles"
          }

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install Linux deps
        if: ${{ matrix.config.name == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install -y xorg-dev

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "${{ matrix.config.generator }}"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=${{ github.event.inputs.minecraft_version }}
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=OFF
          -DBOTCRAFT_BUILD_TESTS=OFF
          -DBOTCRAFT_BUILD_TESTS_ONLINE=OFF
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=OFF
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .


  build_doc:
    runs-on: ubuntu-latest
    needs:
      - pre_configure
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y xorg-dev
          wget https://github.com/doxygen/doxygen/releases/download/Release_1_9_7/doxygen-1.9.7.linux.bin.tar.gz
          tar xzvf doxygen-1.9.7.linux.bin.tar.gz
          cd doxygen-1.9.7
          sudo make install

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "Unix Makefiles"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=${{ github.event.inputs.minecraft_version }}
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=OFF
          -DBOTCRAFT_BUILD_TESTS=OFF
          -DBOTCRAFT_BUILD_TESTS_ONLINE=OFF
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=ON
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .

      - name: Generate doc
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --target doc_doxygen

      - name: Create doc archive
        working-directory: ${{ runner.workspace }}/build/output/doc
        run: cmake -E tar "cf" "doc.zip" --format=zip ${{ github.event.inputs.minecraft_version }}/

      - name: Upload doc as zip
        uses: actions/upload-artifact@v3
        with:
          name: botcraft-doc
          path: ${{ runner.workspace }}/build/output/doc/doc.zip
          retention-days: 1


  build_and_test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs:
      - pre_configure
    strategy:
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            generator: "Visual Studio 17 2022"
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            generator: "Unix Makefiles"
          }

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: jre

      - name: Install Linux deps
        if: ${{ matrix.config.name == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install -y xorg-dev

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "${{ matrix.config.generator }}"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=${{ github.event.inputs.minecraft_version }}
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=ON
          -DBOTCRAFT_BUILD_TESTS=ON
          -DBOTCRAFT_BUILD_TESTS_ONLINE=ON
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=ON
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .

      - name: Build all
        id: build
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE --parallel 2

      - name: Notify issue if build failed
        if: failure() && steps.build.conclusion == 'failure' && ${{ github.event.inputs.issue }}
        run: |
          echo "Build failed. Logs can be found [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ github.job }})." > body.txt
          echo -en '\n' >> body.txt
          echo -en '\n' >> body.txt
          echo @${{ github.repository_owner }} you might want to take a look. >> body.txt
          gh issue comment ${{ github.event.inputs.issue }} --repo ${{ github.repository }} --body-file body.txt
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run tests
        id: test
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: ctest -C $BUILD_TYPE -VV

      - name: Notify issue if tests failed
        if: failure() && steps.test.conclusion == 'failure' && ${{ github.event.inputs.issue }}
        run: |
          echo "Tests failed. See [this run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ github.job }}) for logs." > body.txt
          echo -en '\n' >> body.txt
          echo -en '\n' >> body.txt
          echo @${{ github.repository_owner }} you might want to take a look. >> body.txt
          gh issue comment ${{ github.event.inputs.issue }} --repo ${{ github.repository }} --body-file body.txt
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Prepare test server world download
        if: success() || steps.test.conclusion == 'failure'
        working-directory: ${{ runner.workspace }}/build/output/bin/test_servers
        run: cmake -E rm -rf -- ${{ github.event.inputs.minecraft_version }}/libraries ${{ github.event.inputs.minecraft_version }}/versions

      - name: Upload test server
        if: success() || steps.test.conclusion == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test_world_download_${{ matrix.config.name }}
          path: ${{ runner.workspace }}/build/output/bin/test_servers

      - name: Create install
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE --parallel 2 --target install

      - name: Create artifact archive
        shell: bash
        working-directory: ${{ runner.workspace }}/build/install
        run: cmake -E tar "cf" "botcraft.zip" --format=zip botcraft/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: botcraft-${{ matrix.config.name }}
          path: ${{ runner.workspace }}/build/install/botcraft.zip
          retention-days: 1


  update_release:
    runs-on: ubuntu-latest
    needs:
      - build_doc
      - build_and_test
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-Linux
          path: linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-Windows
          path: windows

      - name: Download doc artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-doc
          path: doc

      - name: Rename artifacts
        run: |
          mv linux/botcraft.zip botcraft-linux-${{ github.event.inputs.minecraft_version }}.zip
          mv windows/botcraft.zip botcraft-windows-${{ github.event.inputs.minecraft_version }}.zip
          mv doc/doc.zip botcraft-doc-${{ github.event.inputs.minecraft_version }}.zip

      - name: Upload files to release
        run: >
          gh release upload latest
          botcraft-linux-${{ github.event.inputs.minecraft_version }}.zip
          botcraft-windows-${{ github.event.inputs.minecraft_version }}.zip
          botcraft-doc-${{ github.event.inputs.minecraft_version }}.zip
          --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Comment on associated issue
        if: ${{ github.event.inputs.issue }}
        run: |
          echo "New binaries available in the [latest release](https://github.com/${{ github.repository }}/releases/tag/latest) for version ${{ github.event.inputs.minecraft_version }}" > body.txt
          echo -en '\n' >> body.txt
          echo You can now close this issue. If you need an updated build for the same Minecraft version in the future, you can reopen this issue to trigger a new build instead of creating a new issue. >> body.txt
          gh issue comment ${{ github.event.inputs.issue }} --repo ${{ github.repository }} --body-file body.txt
        env:
          GH_TOKEN: ${{ github.token }}
