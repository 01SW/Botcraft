name: Build

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/'
      - 'Assets/'
      - 'Visuals/'
      - '.gitignore'
      - 'LICENSE'


env:
  BUILD_TYPE: Release


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  # Make sure dependencies are in cache
  # Stores "latest" MC version as artifact and generate release note
  pre_configure:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            generator: "Visual Studio 17 2022",
            fetch_depth: 1
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            generator: "Unix Makefiles",
            fetch_depth: 0
          }

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ matrix.config.fetch_depth }}

      - name: Install Linux deps
        if: ${{ matrix.config.name == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install -y xorg-dev

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "${{ matrix.config.generator }}"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=latest
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=OFF
          -DBOTCRAFT_BUILD_TESTS=ON
          -DBOTCRAFT_BUILD_TESTS_ONLINE=OFF
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=OFF
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .

      - name: Upload version artifact
        if: ${{ matrix.config.name == 'Linux' }}
        uses: actions/upload-artifact@v3
        with:
          name: MC-version
          path: ${{ runner.workspace }}/build/version.txt
          retention-days: 1

      - name: Create release note
        if: ${{ matrix.config.name == 'Linux' }}
        run: |
            echo Automatically built library with the latest version of the code for Minecraft $(cat ${{ runner.workspace }}/build/version.txt) and all options enabled. Examples are in \`\`bin\`\` folder. If you want to run any example other than 0_HelloWorld and 3_SimpleAFKExample, you first need to run the provided \`\`download_mc_assets\`\` script to automatically populate the \`\`Assets\`\` folder by downloading and extracting the official Minecraft client. > release_note.txt
            echo -en '\n' >> release_note.txt
            echo "If you are on Windows < 10, the script won't work and you'll have to do it manually as curl and tar commands have only been added recently." >> release_note.txt
            echo Linux version is compiled using Ubuntu with all dependencies included and should work on other distributions. You might have to install the unzip command to run the script though. >> release_note.txt
            echo -en '\n' >> release_note.txt
            echo "ðŸ’¡ If you need binaries for a previous version of Minecraft, you can open [an issue using this link](https://github.com/${{ github.repository }}/issues/new?assignees=&labels=version+request&template=version-request.yml&title=%5BVersion+request%5D) and it will be automagically generated for you." >> release_note.txt
            echo -en '\n' >> release_note.txt
            echo **Changes:** >> release_note.txt

      - name: Append git commits
        if: ${{ matrix.config.name == 'Linux' }}
        run: git log latest..HEAD --oneline --no-merges >> release_note.txt

      - name: Upload release note
        if: ${{ matrix.config.name == 'Linux' }}
        uses: actions/upload-artifact@v3
        with:
          name: release_note
          path: release_note.txt
          retention-days: 1


  build_doc:
    runs-on: ubuntu-latest
    needs:
      - pre_configure
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y xorg-dev
          wget https://github.com/doxygen/doxygen/releases/download/Release_1_9_8/doxygen-1.9.8.linux.bin.tar.gz
          tar xzvf doxygen-1.9.8.linux.bin.tar.gz
          cd doxygen-1.9.8
          sudo make install

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "Unix Makefiles"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=latest
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=OFF
          -DBOTCRAFT_BUILD_TESTS=OFF
          -DBOTCRAFT_BUILD_TESTS_ONLINE=OFF
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=ON
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .

      - name: Generate doc
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --target doc_doxygen

      - name: Get version
        id: mc-version
        run: echo "version=$(cat ${{ runner.workspace }}/build/version.txt)" >> $GITHUB_OUTPUT

      - name: Upload raw doc files for pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ runner.workspace }}/build/output/doc/${{ steps.mc-version.outputs.version }}

      - name: Create doc archive
        working-directory: ${{ runner.workspace }}/build/output/doc
        run: cmake -E tar "cf" "doc.zip" --format=zip ${{ steps.mc-version.outputs.version }}/

      - name: Upload doc as zip
        uses: actions/upload-artifact@v3
        with:
          name: botcraft-doc
          path: ${{ runner.workspace }}/build/output/doc/doc.zip
          retention-days: 1


  build_and_test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            generator: "Visual Studio 17 2022"
          }
        - {
            name: "Linux",
            os: ubuntu-latest,
            generator: "Unix Makefiles"
          }
    needs:
      - pre_configure

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: jre

      - name: Install Linux deps
        if: ${{ matrix.config.name == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install -y xorg-dev

      - name: Create build folder
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/build/3rdparty/catch2/install
            ${{ runner.workspace }}/build/3rdparty/glad/install
            ${{ runner.workspace }}/build/3rdparty/glfw/install
            ${{ runner.workspace }}/build/3rdparty/openssl/install
            ${{ runner.workspace }}/build/3rdparty/zlib/install
          key: ${{ runner.os }}-deps

      - name: Configure cmake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: >
          cmake -G "${{ matrix.config.generator }}"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DBOTCRAFT_GAME_VERSION=latest
          -DBOTCRAFT_USE_OPENGL_GUI=ON
          -DBOTCRAFT_USE_IMGUI=ON
          -DBOTCRAFT_COMPRESSION=ON
          -DBOTCRAFT_ENCRYPTION=ON
          -DBOTCRAFT_BUILD_EXAMPLES=ON
          -DBOTCRAFT_BUILD_TESTS=ON
          -DBOTCRAFT_BUILD_TESTS_ONLINE=ON
          -DBOTCRAFT_WINDOWS_BETTER_SLEEP=ON
          -DBOTCRAFT_FORCE_LOCAL_ZLIB=ON
          -DBOTCRAFT_FORCE_LOCAL_OPENSSL=ON
          -DBOTCRAFT_FORCE_LOCAL_GLFW=ON
          -DBOTCRAFT_FORCE_LOCAL_GLAD=ON
          -DBOTCRAFT_FORCE_LOCAL_CATCH=ON
          -DBOTCRAFT_INSTALL_MC_ASSETS=OFF
          -DBOTCRAFT_USE_PRECOMPILED_HEADERS=ON
          -DBOTCRAFT_BUILD_DOC=ON
          -DBOTCRAFT_OUTPUT_DIR=output
          -DCMAKE_INSTALL_PREFIX=install/botcraft
          -S $GITHUB_WORKSPACE
          -B .

      - name: Build all
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE --parallel 2

      - name: Run tests
        shell: bash
        id: test
        working-directory: ${{ runner.workspace }}/build
        run: ctest -C $BUILD_TYPE -VV

      - name: Prepare test server world download
        if: success() || steps.test.conclusion == 'failure'
        shell: bash
        working-directory: ${{ runner.workspace }}/build/output/bin/test_servers
        run: cmake -E rm -rf -- $(cat ${{ runner.workspace }}/build/version.txt)/libraries $(cat ${{ runner.workspace }}/build/version.txt)/versions

      - name: Upload test server
        if: success() || steps.test.conclusion == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test_server_${{ matrix.config.name }}
          path: ${{ runner.workspace }}/build/output/bin/test_servers

      - name: Create install
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE --parallel 2 --target install

      - name: Create artifact archive
        working-directory: ${{ runner.workspace }}/build/install
        run: cmake -E tar "cf" "botcraft.zip" --format=zip botcraft/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: botcraft-${{ matrix.config.name }}
          path: ${{ runner.workspace }}/build/install/botcraft.zip
          retention-days: 1


  release:
    runs-on: ubuntu-latest
    needs:
      - build_doc
      - build_and_test
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-Linux
          path: linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-Windows
          path: windows

      - name: Download doc artifact
        uses: actions/download-artifact@v3
        with:
          name: botcraft-doc
          path: doc

      - name: Download version artifact
        uses: actions/download-artifact@v3
        with:
          name: MC-version
          path: version

      - name: Retrieve MC game version
        id: mc-version
        run: echo "version=$(cat version/version.txt)" >> $GITHUB_OUTPUT

      - name: Download release note
        uses: actions/download-artifact@v3
        with:
          name: release_note
          path: release_note

      - name: Rename artifacts
        run: |
          mv linux/botcraft.zip botcraft-linux-${{ steps.mc-version.outputs.version }}.zip
          mv windows/botcraft.zip botcraft-windows-${{ steps.mc-version.outputs.version }}.zip
          mv doc/doc.zip botcraft-doc-${{ steps.mc-version.outputs.version }}.zip

      - name: Remove old latest release
        run: gh release delete latest --repo ${{ github.repository }} --cleanup-tag -y
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create new latest release
        run: >
          gh release create latest
          botcraft-linux-${{ steps.mc-version.outputs.version }}.zip
          botcraft-windows-${{ steps.mc-version.outputs.version }}.zip
          botcraft-doc-${{ steps.mc-version.outputs.version }}.zip
          --repo ${{ github.repository }}
          --latest
          -F release_note/release_note.txt
          -t Latest
        env:
          GH_TOKEN: ${{ github.token }}


  deploy_doc:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    needs:
      - build_doc
      # Only deploy the doc if a release was successfully created
      - release

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        # Will automatically fetch the artifact "github-pages" uploaded using actions/upload-pages-artifact@v1
        uses: actions/deploy-pages@v2
